library(topicmodels)
library(lda)
#x <- scan('DT_DATA_R.dat', what='', sep = '\n')
x <- scan('word_counts.dat', what='', sep = '\n')
#x <- strsplit(x, ' ')
#x <- lapply(x, strtoi)
documents <- list()
for(i in 1:length(x)){
#documents <- c( documents, list( matrix(x[[i]],2) ) )
doc <- x[i]
doc <- strsplit(doc, ' ')
doc <- doc[[1]]
if(strtoi(doc[1]) > 0) {
matrix_temp <- matrix(1:(strtoi(doc[1])*2), 2)
for(j in 2:length(doc)){
ind_freq <- doc[j]
ind_freq <- strsplit(ind_freq, ':')
ind_freq <- ind_freq[[1]]
matrix_temp[1, j-1] <- strtoi(ind_freq[1])
matrix_temp[2, j-1] <- strtoi(ind_freq[2])
}
documents <- c( documents, list( matrix_temp ) )
}
}
mm <- length(documents)
#vocab <- scan('VOCAB_DATA_R.dat', what='', sep = '\n')
vocab <- scan('vocab.dat', what='', sep = '\n')
## SPLINT IN KV FOLDS
KV <- 5
folds <- list()
if( mm %% KV == 0) {
width_fold <- mm / KV
ini <- 1
for ( ii in 1:KV ) {
folds[[ii]] <- documents[ini:(ini+width_fold-1)]
ini <- ini + width_fold
}
} else{
width_fold <- floor(mm / KV) + 1
ini <- 1
for ( ii in 1:(mm %% KV) ) {
folds[[ii]] <- documents[ini:(ini+width_fold-1)]
ini <- ini + width_fold
}
width_fold <- floor(mm / KV)
for ( ii in (mm %% KV + 1):KV ) {
folds[[ii]] <- documents[ini:(ini+width_fold-1)]
ini <- ini + width_fold
}
}
#train_docs <- ldaformat2dtm(TRAIN, vocab, omit_empty = TRUE)
#test_docs <- ldaformat2dtm(TEST, vocab, omit_empty = TRUE)
#list(alpha = 0.1)
perplex <- 10000000000
optimo <- 0
resp <- c()
resp2 <- c()
loglik <- c()
#cats <- c(5, 10, 14, 18, 22, 26, 30, 34, 38) ## GISCIA 1
#cats <- c(42, 46, 50, 60, 70, 80, 90) ## GISCIA 2
#cats <- c(100, 110, 120, 150, 200) ## CORONADO
#, 250, 300, 350, 400, 450, 500)
#cats <- c(5, 10) ##local
cats <- c(5,10,50,100)
K <- 10
for(cat in cats){
K <- cat
control_LDA_VEM <- list(estimate.alpha = TRUE, alpha = 5/K, estimate.beta = TRUE,
verbose = 1, prefix = tempfile(), save = 0, keep = 0,
seed = as.integer(Sys.time()), nstart = 1, best = TRUE,
var = list(iter.max = 500, tol = 10^-6),
em = list(iter.max = 1000, tol = 10^-4),
initialize = "random")
perplex_model <- 0
perplex_test <- 0
loglog <- 0
min_per <- 100000000
for ( ii in 1:KV ) {
print("INFO UPDATED>>>>>>>>> K - #fold")
print(K)
print(ii)
TRAIN <- list()
TEST <- folds[[ii]]
for( jj in 1:KV ) {
if ( jj != ii ) {
TRAIN <- c(TRAIN, folds[[jj]])
}
}
train_docs <- ldaformat2dtm(TRAIN, vocab, omit_empty = TRUE)
test_docs <- ldaformat2dtm(TEST, vocab, omit_empty = TRUE)
lda_model <- LDA(x = train_docs, control = control_LDA_VEM , k = K, method = "VEM")
perplex_model <- perplex_model + perplexity(lda_model)
perplex_test <- perplex_test + perplexity(lda_model, test_docs)
loglog <- loglog + logLik(lda_model)
min_per <- min(min_per, perplexity(lda_model, test_docs))
}
print(" ** Minimun perplexity of hold-out data during Cross-Validation **")
print(min_per)
perplex_model <- perplex_model / KV
perplex_test <- perplex_test / KV
loglog <- loglog / KV
metric <- perplex_test
resp <- c(resp, metric)
resp2 <- c(resp2, perplex_model)
loglik <- c(loglik, loglog)
if(metric < perplex){
perplex <-metric
optimo <- K
print(" << Optimal values so far >> ")
print(optimo)
print(perplex)
}
}
print(resp)
#terms(lda_model, 5)
#lda_model <- LDA(x = train_docs, control = control_LDA_VEM , k = K, method = "VEM")
#terms(lda_model, 5)
#perplexity(lda_model)
#perplexity(lda_model, test_docs)
#lda2_model <- lda.collapsed.gibbs.sampler(documents, 70, vocab, 150, 1, 0.01)
#predictions <- predictive.distribution(lda2_model$document_sums[,1:2], lda2_model$topics, 1, 0.01)
#top.topic.words(lda2_model$topics, 10,by.score = FALSE)
library(topicmodels)
library(lda)
#x <- scan('DT_DATA_R.dat', what='', sep = '\n')
x <- scan('word_counts.dat', what='', sep = '\n')
#x <- strsplit(x, ' ')
#x <- lapply(x, strtoi)
documents <- list()
for(i in 1:length(x)){
#documents <- c( documents, list( matrix(x[[i]],2) ) )
doc <- x[i]
doc <- strsplit(doc, ' ')
doc <- doc[[1]]
if(strtoi(doc[1]) > 0) {
matrix_temp <- matrix(1:(strtoi(doc[1])*2), 2)
for(j in 2:length(doc)){
ind_freq <- doc[j]
ind_freq <- strsplit(ind_freq, ':')
ind_freq <- ind_freq[[1]]
matrix_temp[1, j-1] <- strtoi(ind_freq[1])
matrix_temp[2, j-1] <- strtoi(ind_freq[2])
}
documents <- c( documents, list( matrix_temp ) )
}
}
mm <- length(documents)
#vocab <- scan('VOCAB_DATA_R.dat', what='', sep = '\n')
vocab <- scan('vocab.dat', what='', sep = '\n')
## SPLINT IN KV FOLDS
KV <- 10
folds <- list()
if( mm %% KV == 0) {
width_fold <- mm / KV
ini <- 1
for ( ii in 1:KV ) {
folds[[ii]] <- documents[ini:(ini+width_fold-1)]
ini <- ini + width_fold
}
} else{
width_fold <- floor(mm / KV) + 1
ini <- 1
for ( ii in 1:(mm %% KV) ) {
folds[[ii]] <- documents[ini:(ini+width_fold-1)]
ini <- ini + width_fold
}
width_fold <- floor(mm / KV)
for ( ii in (mm %% KV + 1):KV ) {
folds[[ii]] <- documents[ini:(ini+width_fold-1)]
ini <- ini + width_fold
}
}
#train_docs <- ldaformat2dtm(TRAIN, vocab, omit_empty = TRUE)
#test_docs <- ldaformat2dtm(TEST, vocab, omit_empty = TRUE)
#list(alpha = 0.1)
perplex <- 10000000000
optimo <- 0
resp <- c()
resp2 <- c()
loglik <- c()
#cats <- c(5, 10, 14, 18, 22, 26, 30, 34, 38) ## GISCIA 1
#cats <- c(42, 46, 50, 60, 70, 80, 90) ## GISCIA 2
#cats <- c(100, 110, 120, 150, 200) ## CORONADO
#, 250, 300, 350, 400, 450, 500)
#cats <- c(5, 10) ##local
cats <- c(5,10,50,100)
K <- 10
for(cat in cats){
K <- cat
control_LDA_VEM <- list(estimate.alpha = TRUE, alpha = 5/K, estimate.beta = TRUE,
verbose = 1, prefix = tempfile(), save = 0, keep = 0,
seed = as.integer(Sys.time()), nstart = 1, best = TRUE,
var = list(iter.max = 500, tol = 10^-6),
em = list(iter.max = 1000, tol = 10^-4),
initialize = "random")
perplex_model <- 0
perplex_test <- 0
loglog <- 0
min_per <- 100000000
for ( ii in 1:KV ) {
print("INFO UPDATED>>>>>>>>> K - #fold")
print(K)
print(ii)
TRAIN <- list()
TEST <- folds[[ii]]
for( jj in 1:KV ) {
if ( jj != ii ) {
TRAIN <- c(TRAIN, folds[[jj]])
}
}
train_docs <- ldaformat2dtm(TRAIN, vocab, omit_empty = TRUE)
test_docs <- ldaformat2dtm(TEST, vocab, omit_empty = TRUE)
lda_model <- LDA(x = train_docs, control = control_LDA_VEM , k = K, method = "VEM")
perplex_model <- perplex_model + perplexity(lda_model)
perplex_test <- perplex_test + perplexity(lda_model, test_docs)
loglog <- loglog + logLik(lda_model)
min_per <- min(min_per, perplexity(lda_model, test_docs))
}
print(" ** Minimun perplexity of hold-out data during Cross-Validation **")
print(min_per)
perplex_model <- perplex_model / KV
perplex_test <- perplex_test / KV
loglog <- loglog / KV
metric <- perplex_test
resp <- c(resp, metric)
resp2 <- c(resp2, perplex_model)
loglik <- c(loglik, loglog)
if(metric < perplex){
perplex <-metric
optimo <- K
print(" << Optimal values so far >> ")
print(optimo)
print(perplex)
}
}
print(resp)
#terms(lda_model, 5)
#lda_model <- LDA(x = train_docs, control = control_LDA_VEM , k = K, method = "VEM")
#terms(lda_model, 5)
#perplexity(lda_model)
#perplexity(lda_model, test_docs)
#lda2_model <- lda.collapsed.gibbs.sampler(documents, 70, vocab, 150, 1, 0.01)
#predictions <- predictive.distribution(lda2_model$document_sums[,1:2], lda2_model$topics, 1, 0.01)
#top.topic.words(lda2_model$topics, 10,by.score = FALSE)
m1_p <- c(1371.4812, 1372.5595,  705.2081 , 668.0389 , 632.6927 , 619.3525 , 604.7263 , 583.7845 , 573.1987 , 739.4820, 742.6395, 724.0740, 707.3859, 714.1333, 698.8240, 691.0188     , 677.5703, 641.6950 , 621.2231, 597.8551, 565.0388)
ks <- c(5, 10, 14, 18, 22, 26, 30, 34, 38 , 42 46 50 60 70 80 90 ,  100, 110, 120, 150, 200)
ks <- c(5, 10, 14, 18, 22, 26, 30, 34, 38 , 42 ,46, 50 ,60 ,70 ,80 ,90 ,  100, 110, 120, 150, 200)
m2_p <- c(1073.9108 , 925.4457 , 855.8779 , 812.3643 , 780.6121 , 753.5096,  731.2161 , 711.0265 , 694.9527 , 681.2321 , 669.4612 , 657.6022 , 635.9901,  618.7554 , 606.3185 , 594.4574 , 588.1499 , 581.1870 , 576.4081 ,  567.6944 , 570.3447)
plot(ks, m1_p,type='l')
plot(ks, m2_p,type='l')
?plot
plot(ks, m2_p,type='l',title='asdsa')
plot(ks, m2_p,type='l',main='asdsa')
warnings()
plot(ks, m2_p,type='l',main='asdsa')
par(new=TRUE)
plot(ks, m1_p,type='l')
plot(ks, m2_p,type='l',main='wer')
plot(ks, m1_p,type='ld')
plot(ks, m1_p,type='d')
plot(ks, m1_p,type='d')
plot(ks, m1_p,type='p')
m1_pt <- c(1371.4812, 1372.5595,  705.2081,  668.0389,  632.6927,  619.3525 , 604.7263,  583.7845 , 573.1987 , 566.2333, 563.6213 ,544.6574, 525.8022, 527.2044, 507.9753, 492.9589     , 469.4388, 430.5813 , 399.4237, 351.4015, 306.0086)
plot(ks, m1_pt,type='l')
m3_p <- c(605.1856, 548.6138, 523.5465 ,519.4626, 510.7058 ,508.7585, 512.2570, 530.7289, 534.4006, 522.0325, 542.0578 ,537.1534, 546.1868, 557.1522, 559.1590, 562.0207 ,567.0327 ,567.4048 ,568.3768 ,488.4169 ,466.3219)
m4_p <- c(636.8440 ,556.1178 ,519.6721, 492.1232, 472.6889, 458.4194, 446.3176, 435.2736, 426.6147 ,417.2878, 410.0215 ,403.1754 ,390.6185 ,382.3717, 376.1928 ,371.9064 ,369.4566, 366.7987,  366.8875 , 368.2846, 378.2631)
plot(ks,m3_p,type='l',col='red')
par(new=TRUE)
plot(ks,m4_p,type='l',col='blue')
plot(ks,m1_p,type='l',col='red')
par(new=TRUE)
plot(ks,m2_p,type='l',col='blue')
m1_ll <- c(-2561836, -2562115, -2325937, -2306736, -2287455, -2279900, -2271420, -2258925, -2252433  , -2248093, -2246454, -2234309 ,-2221820, -2222762 ,-2209586, -2198949    , -2181607, -2150959 , -2124328, -2078906, -2029853)
m2_ll <- c(-2153918, -1996322, -1924536, -1881494, -1850765, -1829276, -1812235 ,-1798197, -1785418, -1778070 ,-1773267, -1764503, -1757372, -1757169, -1758933, -1755465 ,-1759341, -1763307, -1766532 , -1783780 , -1818633)
plot(ks,m1_ll,type='l',col='red')
par(new=TRUE)
plot(ks,m2_ll,type='l',col='blue')
m3_ll <- c(-1008687.4 , -987293.2 , -977645.8 , -973851.8 , -970663.1 , -969092.1 , -969679.5 , -973946.2 , -974791.0 , -971097.9 , -977919.4 , -975202.9 , -978208.0 , -981079.9 , -980521.3 , -981163.7 , -981800.2 , -979920.5 , -975538.8 , -915150.2 , -879976.7)
m4_ll <- c(-867589.0, -785102.2, -753372.4, -732445.0, -717198.3, -706628.8, -700305.6, -694572.8, -687636.5, -684028.7, -680424.1, -677801.5, -672242.1, -669968.4, -670623.0, -672613.8 , -675842.8, -678421.6, -682841.5 , -696418.2 , -721249.6)
plot(ks,m3_ll,type='l',col='red')
par(new=TRUE)
plot(ks,m4_ll,type='l',col='blue')
m3_full <- c(605.1856, 548.6138, 523.5465 ,519.4626, 510.7058 ,508.7585, 512.2570, 530.7289, 534.4006, 522.0325, 542.0578 ,537.1534, 546.1868, 557.1522, 559.1590, 562.0207 ,567.0327 ,567.4048 ,568.3768 ,488.4169 ,466.3219)
m3_p <- c(605.1856, 548.6138, 523.5465 ,519.4626, 510.7058 ,508.7585, 512.2570, 530.7289, 534.4006, 522.0325, 542.0578 ,537.1534, 546.1868, 557.1522, 559.1590, 562.0207 ,567.0327 ,567.4048 ,568.3768 ,488.4169 ,466.3219)
m4_p <- c(636.8440 ,556.1178 ,519.6721, 492.1232, 472.6889, 458.4194, 446.3176, 435.2736, 426.6147 ,417.2878, 410.0215 ,403.1754 ,390.6185 ,382.3717, 376.1928 ,371.9064 ,369.4566, 366.7987,  366.8875 , 368.2846, 378.2631, 469.2258)
ks_e <- c(5, 10, 14, 18, 22, 26, 30, 34, 38, 42, 50, 60, 70, 80, 90, 100, 110, 120, 150 , 200, 500)
ks <- c(5, 10, 14, 18, 22, 26, 30, 34, 38, 42, 50, 60, 70, 80, 90, 100, 110, 120, 150 , 200)
plot(ks,m3_p,type='l',col='red',main='Name entities')
ks
m3_p.size
m3_p.size()
m3_p.fim()
m3_p.dim()
dim(m3_p)
len(m3_p)
length(m3_p)
length(ks)
m3_p <- c(605.1856, 548.6138, 523.5465 ,519.4626, 510.7058 ,508.7585, 512.2570, 530.7289, 534.4006, 522.0325, 542.0578 ,537.1534, 546.1868, 557.1522, 559.1590, 562.0207 ,567.0327 ,567.4048 ,568.3768 ,488.4169 ,466.3219)
length(m3_p)
length(m4_p)
ks_e
length(ks_e)
ksks
ks
m3_p <- c(605.1856, 548.6138, 523.5465 ,519.4626, 510.7058 ,508.7585, 512.2570, 530.7289, 534.4006, 522.0325, 542.0578 ,537.1534, 546.1868, 557.1522, 559.1590, 562.0207 ,567.0327 ,567.4048 ,568.3768 ,488.4169 ,466.3219)
length(m3_p)
m3_ptr <- c( 541.4364, 473.7614, 446.0858, 435.6525, 427.0688, 422.9338, 424.4488, 435.9326, 438.2340, 428.2277, 446.9060, 439.3623, 447.6936, 455.7531, 454.1613, 456.0018, 457.8097 ,452.5052, 440.4543 ,302.0929 ,242.5509)
length(m3_ptr)
ks <- c(5, 10, 14, 18, 22, 26, 30, 34, 38 , 42 ,46, 50 ,60 ,70 ,80 ,90 ,  100, 110, 120, 150, 200)
length(ks)
ks_e <- c(5, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46,50, 60, 70, 80, 90, 100, 110, 120, 150 , 200, 500)
plot(ks,m3_p,type='l',col='red',main='Name entities')
pair(new=TRUE)
par(new=TRUE)
plot(ks,m4_p,type='l',col='blue')
plot(ks_e,m4_p,type='l',col='blue')
plot(ks,m4_p,type='l',col='blue',main)
plot(ks,m3_p,type='l',col='red',main='Name entities VEM')
plot(ks_e,m4_p,type='l',col='blue',main='Name entities GIBBS')
m2_p <- c(1073.9108 , 925.4457 , 855.8779 , 812.3643 , 780.6121 , 753.5096,  731.2161 , 711.0265 , 694.9527 , 681.2321 , 669.4612 , 657.6022 , 635.9901,  618.7554 , 606.3185 , 594.4574 , 588.1499 , 581.1870 , 576.4081 ,  567.6944 , 570.3447, 652.833)
plot(ks_e,m2_p,type='l',col='blue',main='Full text GIBBS')
plot(ks_e,m4_p,type='l',col='blue',main='Name entities GIBBS')
plot(ks,m3_p,type='l',col='red',main='Name entities VEM')
stopCluster(cl)
alps <- log(c(1e-5,1e-4,1e-3,0.01,0.05,0.08,0.1,0.5,0.8,1,1.5,2,5,10))
aps
alps
p <-c(835.9483,  677.2747 , 554.1167 , 494.8301 , 532.4795 , 572.8860 , 587.9993 , 631.5172 , 642.7162 , 654.1027 ,1133.1687 ,1046.6039 , 905.0412 , 861.7945)
plot(alps,p,type='l')
alps
log_aps <- aps
log_aps <- alps
alps <- c(1e-5,1e-4,1e-3,0.01,0.05,0.08,0.1,0.5,0.8,1,1.5,2,5,10)
full = c(1026.9678 , 885.3897 , 747.5503 , 680.2808 , 700.7838 , 751.7003  ,779.0397,  971.1382, 1008.6588 ,1036.2923 ,2030.8766 ,1890.3419 ,1648.6836 ,1571.9694
)
plot(alps,full,type='l')
plot(log_alps,full,type='l')
log_aps
plot(log_aps,full,type='l')
full
alps
lk <- c(-2198966 ,-2175590, -2152023, -2151369, -2190066, -2222011 ,-2241222 ,-2371844 ,-2393451, -2405511, -2668776 ,-2643405, -2594929 ,-2578035)
plot(log_aps,lk,type='l')
lk
plot(log_aps,p,type='l')
alps
p
cats <- c(K = 5, 10, 14, 18, 22, 26, 30, 34, 38 , 42 ,46, 50 ,60 ,70 ,80 ,90 ,  100, 110, 120, 150, 200)
cats <- c(5, 10, 14, 18, 22, 26, 30, 34, 38 , 42 ,46, 50 ,60 ,70 ,80 ,90 ,  100, 110, 120, 150, 200)
full_pt <- c(1059.9175, 1504.2111,  847.8891 , 826.4392 , 807.2088 , 790.0998 , 771.5038 , 758.3908 , 745.2261 , 742.9758, 742.6395, 724.0740, 707.3859, 714.1333, 698.8240, 691.0188     , 677.5703, 641.6950 , 621.2231, 597.8551, 565.0388)
plot(cats,full_pt,type='l')
lk <- c(-2419877, -2562204, -2321348, -2307309, -2293776, -2283506, -2270203, -2261160, -2252669  , -2250861, -2246454, -2234309 ,-2221820, -2222762 ,-2209586, -2198949    , -2181607, -2150959 , -2124328, -2078906, -2029853)
plot(cats,lk,type='l')
ne_pt <- c(605.1856, 548.6138, 523.5465 ,519.4626, 510.7058 ,508.7585, 512.2570, 530.7289, 534.4006, 522.0325, 542.0578 ,537.1534, 546.1868, 557.1522, 559.1590, 562.0207 ,567.0327 ,567.4048 ,568.3768 ,488.4169 ,466.3219,  489.3557)
catss <- c(5, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46,50, 60, 70, 80, 90, 100, 110, 120, 150 , 200, 500)
plot(catss,ne_pt,type='l')
catss[which.min(ne_pt)]
setwd('/home/ronotex/hdp-master/res_full')
read.table('train.log',sep = ' ', header = TRUE)
read.table('train.log',sep = '\t', header = TRUE)
read.table('train.log',sep = '\t', header = TRUE)
read.table('train.log',sep = '\t', header = TRUE)
read.table('train.log',sep = '\t', header = TRUE)
read.table('train.log',sep = '\t', header = FALSE)
read.table('train.log',sep = '\t', header = FALSE)
train_log <- read.table('train.log',sep = '\t', header = FALSE)
train_log[:,3]
train_log[,3]
plot(train_log[,3],train_log[,12])
dim(train_log
)
plot(train_log[,3],train_log[,11])
plot(train_log[,11],train_log[,3])
plot(train_log[,2],train_log[,3])
plot(train_log[,2],train_log[,3],type='l')
plot(train_log[,2],train_log[,11],type='l')
plot(train_log[,2],train_log[,10],type='l')
cats <- c (5, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46,50, 60, 70, 80, 90, 100, 110, 120)
ne_pt <- c(664.8904, 603.9616, 583.8012, 576.7330, 555.2049, 554.8111, 552.0065, 530.3919, 515.4687, 515.9214, 521.5442, 506.8113, 512.1090, 500.5398, 497.6485, 487.7797, 497.1702, 488.3435, 491.1137)
plot(cats,ne_pt,type='l')
cats[which.min(ne_pt)]
ne_gibbs <- c(1073.9108 , 925.4457 , 855.8779 , 812.3643 , 780.6121 , 753.5096,  731.2161 , 711.0265 , 694.9527 , 681.2321 , 669.4612 , 657.6022 , 635.9901,  618.7554 , 606.3185 , 594.4574 , 588.1499 , 581.1870 , 576.4081 ,  567.6944 , 570.3447)
plot(cats,ne_gibbs,type='l')
ne_gibbs <- c(636.8440 ,556.1178 ,519.6721, 492.1232, 472.6889, 458.4194, 446.3176, 435.2736, 426.6147 ,417.2878, 410.0215 ,403.1754 ,390.6185 ,382.3717, 376.1928 ,371.9064 ,369.4566, 366.7987,  366.8875)
plot(cats,ne_gibbs,type='l')
cats[which.min(ne_gibbs)]
ne_ptr <- c(576.8229 501.7311 464.6564 450.7378 428.3229 416.0716 405.4530 385.8388 368.8825 366.4490 358.8177 349.1342 339.1921 325.9053 313.3833 299.4608 295.6137 285.5792 280.9629)
ne_ptr <- c(576.8229, 501.7311, 464.6564, 450.7378, 428.3229, 416.0716, 405.4530, 385.8388, 368.8825, 366.4490, 358.8177, 349.1342, 339.1921, 325.9053, 313.3833, 299.4608, 295.6137, 285.5792, 280.9629)
plot(cats,ne_ptr,type='l')
plot(cats,ne_pt,type='l')
setwd('/home/ronotex/empanadas/hdp/res_full')
train_log <- read.table('train.log',sep = '\t', header = FALSE)
plot(train_log[,2],train_log[,3],type='l')
plot(train_log[,2],train_log[,3],type='l')
plot(train_log[,2],train_log[,11],type='l')
setwd('/home/ronotex/hdp-master/res_ne')
train_log <- read.table('train.log',sep = '\t', header = FALSE)
plot(train_log[,2],train_log[,3])
plot(train_log[,2],train_log[,3],type='l')
plot(train_log[,2],train_log[,11],type='l')
setwd('/home/ronotex/empanadas/hdp/res_ne')
train_log <- read.table('train.log',sep = '\t', header = FALSE)
plot(train_log[,2],train_log[,3],type='l')
plot(train_log[,2],train_log[,11],type='l')
